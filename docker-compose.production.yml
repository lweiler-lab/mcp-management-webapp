version: '3.8'

services:
  # Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PUBLIC_API_URL: ${PUBLIC_API_URL:-https://api.mcp.collective-systems.de}
        PUBLIC_WS_URL: ${PUBLIC_WS_URL:-wss://api.mcp.collective-systems.de/ws}
        PUBLIC_ENVIRONMENT: production
    image: mcp-management:latest
    container_name: mcp-management-app
    restart: unless-stopped
    environment:
      # Application
      NODE_ENV: production
      PORT: 3000
      HOST: 0.0.0.0
      
      # Database
      DATABASE_URL: postgresql://${DB_USER:-mcpuser}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-mcp_management}
      DB_POOL_MAX: ${DB_POOL_MAX:-20}
      DB_POOL_MIN: ${DB_POOL_MIN:-2}
      
      # Redis Cache
      REDIS_URL: redis://redis:6379
      REDIS_DB: ${REDIS_DB:-0}
      REDIS_KEY_PREFIX: ${REDIS_KEY_PREFIX:-mcp:}
      
      # Security
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      SESSION_SECRET: ${SESSION_SECRET}
      
      # MCP Bridge
      MCP_BRIDGE_URL: ${MCP_BRIDGE_URL:-http://185.163.117.155:3001}
      MCP_AUTH_TOKEN: ${MCP_AUTH_TOKEN}
      
      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      
      # Cloudflare
      CLOUDFLARE_API_TOKEN: ${CLOUDFLARE_API_TOKEN}
      CLOUDFLARE_ACCOUNT_ID: ${CLOUDFLARE_ACCOUNT_ID}
      
      # Monitoring
      ENABLE_MONITORING: true
      METRICS_INTERVAL: 30000
      
      # Features
      RUN_MIGRATIONS: true
      ENABLE_CACHE: true
      ENABLE_RATE_LIMITING: true
      
    ports:
      - "${APP_PORT:-3000}:3000"
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    networks:
      - mcp-network
    
    volumes:
      - app-logs:/app/logs
    
    healthcheck:
      test: ["CMD", "node", "/app/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mcp-app.rule=Host(`${DOMAIN:-mcp.collective-systems.de}`)"
      - "traefik.http.routers.mcp-app.tls=true"
      - "traefik.http.routers.mcp-app.tls.certresolver=letsencrypt"
      - "traefik.http.services.mcp-app.loadbalancer.server.port=3000"

  # Database
  postgres:
    image: postgres:15-alpine
    container_name: mcp-management-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-mcp_management}
      POSTGRES_USER: ${DB_USER:-mcpuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    
    ports:
      - "${DB_PORT:-5432}:5432"
    
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/database/init:/docker-entrypoint-initdb.d
    
    networks:
      - mcp-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-mcpuser} -d ${DB_NAME:-mcp_management}"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    command:
      - postgres
      - -c
      - max_connections=200
      - -c
      - shared_buffers=256MB
      - -c
      - effective_cache_size=1GB
      - -c
      - work_mem=4MB
      - -c
      - maintenance_work_mem=64MB
      - -c
      - wal_buffers=16MB
      - -c
      - checkpoint_completion_target=0.7
      - -c
      - random_page_cost=1.1
      - -c
      - effective_io_concurrency=200

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mcp-management-redis
    restart: unless-stopped
    
    ports:
      - "${REDIS_PORT:-6379}:6379"
    
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    
    networks:
      - mcp-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    
    command: redis-server /usr/local/etc/redis/redis.conf
    
    sysctls:
      net.core.somaxconn: 1024

  # Reverse Proxy & SSL
  traefik:
    image: traefik:v3.0
    container_name: mcp-traefik
    restart: unless-stopped
    
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Dashboard
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-data:/data
      - ./traefik.yml:/traefik.yml:ro
    
    networks:
      - mcp-network
    
    environment:
      - CLOUDFLARE_DNS_API_TOKEN=${CLOUDFLARE_DNS_API_TOKEN}
    
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@collective-systems.de}
      - --certificatesresolvers.letsencrypt.acme.storage=/data/acme.json
      - --log.level=INFO
      - --accesslog=true

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    restart: unless-stopped
    
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    
    volumes:
      - prometheus-data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    
    networks:
      - mcp-network
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    restart: unless-stopped
    
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    
    networks:
      - mcp-network

  # Log Management
  loki:
    image: grafana/loki:latest
    container_name: mcp-loki
    restart: unless-stopped
    
    ports:
      - "3100:3100"
    
    volumes:
      - loki-data:/tmp/loki
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml
    
    networks:
      - mcp-network
    
    command: -config.file=/etc/loki/local-config.yaml

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: mcp-backup
    restart: "no"
    
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    
    volumes:
      - backup-data:/backup
      - ./scripts/backup.sh:/backup.sh
    
    networks:
      - mcp-network
    
    depends_on:
      - postgres
    
    entrypoint: |
      sh -c 'chmod +x /backup.sh && /backup.sh'

# Networks
networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  traefik-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  backup-data:
    driver: local
  app-logs:
    driver: local